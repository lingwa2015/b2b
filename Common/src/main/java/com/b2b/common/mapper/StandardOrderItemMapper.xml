<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.b2b.common.dao.StandardOrderItemMapper" >
  <resultMap id="BaseResultMap" type="com.b2b.common.domain.StandardOrderItem" >
    <id column="soi_id" property="soiId" jdbcType="INTEGER" />
    <result column="standardorder_id" property="standardorderId" jdbcType="INTEGER" />
    <result column="item_id" property="itemId" jdbcType="INTEGER" />
    <result column="item_name" property="itemName" jdbcType="VARCHAR" />
    <result column="num" property="num" jdbcType="INTEGER" />
    <result column="fee" property="fee" jdbcType="BIGINT" />
    <result column="item_price" property="itemPrice" jdbcType="BIGINT" />
    <result column="item_size" property="itemSize" jdbcType="VARCHAR" />
    <result column="item_cost_price" property="itemCostPrice" jdbcType="BIGINT" />
    <result column="notaxInclusivecostPrice" property="notaxinclusivecostprice" jdbcType="BIGINT" />
    <result column="item_size_type" property="itemSizeType" jdbcType="VARCHAR" />
    <result column="stock_num" property="stockNum" jdbcType="INTEGER" />
    <result column="img_path" property="imgPath" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    soi_id, standardorder_id, item_id, item_name, num, fee, item_price, item_size, item_cost_price, 
    notaxInclusivecostPrice, item_size_type, stock_num
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.b2b.common.domain.StandardOrderItemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from standard_orderitem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from standard_orderitem
    where soi_id = #{soiId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from standard_orderitem
    where soi_id = #{soiId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.b2b.common.domain.StandardOrderItemExample" >
    delete from standard_orderitem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.b2b.common.domain.StandardOrderItem" >
    insert into standard_orderitem (soi_id, standardorder_id, item_id, 
      item_name, num, fee, 
      item_price, item_size, item_cost_price, 
      notaxInclusivecostPrice, item_size_type, stock_num
      )
    values (#{soiId,jdbcType=INTEGER}, #{standardorderId,jdbcType=INTEGER}, #{itemId,jdbcType=INTEGER}, 
      #{itemName,jdbcType=VARCHAR}, #{num,jdbcType=INTEGER}, #{fee,jdbcType=BIGINT}, 
      #{itemPrice,jdbcType=BIGINT}, #{itemSize,jdbcType=VARCHAR}, #{itemCostPrice,jdbcType=BIGINT}, 
      #{notaxinclusivecostprice,jdbcType=BIGINT}, #{itemSizeType,jdbcType=VARCHAR}, #{stockNum,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.b2b.common.domain.StandardOrderItem" >
    insert into standard_orderitem
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="soiId != null" >
        soi_id,
      </if>
      <if test="standardorderId != null" >
        standardorder_id,
      </if>
      <if test="itemId != null" >
        item_id,
      </if>
      <if test="itemName != null" >
        item_name,
      </if>
      <if test="num != null" >
        num,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="itemPrice != null" >
        item_price,
      </if>
      <if test="itemSize != null" >
        item_size,
      </if>
      <if test="itemCostPrice != null" >
        item_cost_price,
      </if>
      <if test="notaxinclusivecostprice != null" >
        notaxInclusivecostPrice,
      </if>
      <if test="itemSizeType != null" >
        item_size_type,
      </if>
      <if test="stockNum != null" >
        stock_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="soiId != null" >
        #{soiId,jdbcType=INTEGER},
      </if>
      <if test="standardorderId != null" >
        #{standardorderId,jdbcType=INTEGER},
      </if>
      <if test="itemId != null" >
        #{itemId,jdbcType=INTEGER},
      </if>
      <if test="itemName != null" >
        #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="num != null" >
        #{num,jdbcType=INTEGER},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=BIGINT},
      </if>
      <if test="itemPrice != null" >
        #{itemPrice,jdbcType=BIGINT},
      </if>
      <if test="itemSize != null" >
        #{itemSize,jdbcType=VARCHAR},
      </if>
      <if test="itemCostPrice != null" >
        #{itemCostPrice,jdbcType=BIGINT},
      </if>
      <if test="notaxinclusivecostprice != null" >
        #{notaxinclusivecostprice,jdbcType=BIGINT},
      </if>
      <if test="itemSizeType != null" >
        #{itemSizeType,jdbcType=VARCHAR},
      </if>
      <if test="stockNum != null" >
        #{stockNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.b2b.common.domain.StandardOrderItemExample" resultType="java.lang.Integer" >
    select count(*) from standard_orderitem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update standard_orderitem
    <set >
      <if test="record.soiId != null" >
        soi_id = #{record.soiId,jdbcType=INTEGER},
      </if>
      <if test="record.standardorderId != null" >
        standardorder_id = #{record.standardorderId,jdbcType=INTEGER},
      </if>
      <if test="record.itemId != null" >
        item_id = #{record.itemId,jdbcType=INTEGER},
      </if>
      <if test="record.itemName != null" >
        item_name = #{record.itemName,jdbcType=VARCHAR},
      </if>
      <if test="record.num != null" >
        num = #{record.num,jdbcType=INTEGER},
      </if>
      <if test="record.fee != null" >
        fee = #{record.fee,jdbcType=BIGINT},
      </if>
      <if test="record.itemPrice != null" >
        item_price = #{record.itemPrice,jdbcType=BIGINT},
      </if>
      <if test="record.itemSize != null" >
        item_size = #{record.itemSize,jdbcType=VARCHAR},
      </if>
      <if test="record.itemCostPrice != null" >
        item_cost_price = #{record.itemCostPrice,jdbcType=BIGINT},
      </if>
      <if test="record.notaxinclusivecostprice != null" >
        notaxInclusivecostPrice = #{record.notaxinclusivecostprice,jdbcType=BIGINT},
      </if>
      <if test="record.itemSizeType != null" >
        item_size_type = #{record.itemSizeType,jdbcType=VARCHAR},
      </if>
      <if test="record.stockNum != null" >
        stock_num = #{record.stockNum,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update standard_orderitem
    set soi_id = #{record.soiId,jdbcType=INTEGER},
      standardorder_id = #{record.standardorderId,jdbcType=INTEGER},
      item_id = #{record.itemId,jdbcType=INTEGER},
      item_name = #{record.itemName,jdbcType=VARCHAR},
      num = #{record.num,jdbcType=INTEGER},
      fee = #{record.fee,jdbcType=BIGINT},
      item_price = #{record.itemPrice,jdbcType=BIGINT},
      item_size = #{record.itemSize,jdbcType=VARCHAR},
      item_cost_price = #{record.itemCostPrice,jdbcType=BIGINT},
      notaxInclusivecostPrice = #{record.notaxinclusivecostprice,jdbcType=BIGINT},
      item_size_type = #{record.itemSizeType,jdbcType=VARCHAR},
      stock_num = #{record.stockNum,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.b2b.common.domain.StandardOrderItem" >
    update standard_orderitem
    <set >
      <if test="standardorderId != null" >
        standardorder_id = #{standardorderId,jdbcType=INTEGER},
      </if>
      <if test="itemId != null" >
        item_id = #{itemId,jdbcType=INTEGER},
      </if>
      <if test="itemName != null" >
        item_name = #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="num != null" >
        num = #{num,jdbcType=INTEGER},
      </if>
      <if test="fee != null" >
        fee = #{fee,jdbcType=BIGINT},
      </if>
      <if test="itemPrice != null" >
        item_price = #{itemPrice,jdbcType=BIGINT},
      </if>
      <if test="itemSize != null" >
        item_size = #{itemSize,jdbcType=VARCHAR},
      </if>
      <if test="itemCostPrice != null" >
        item_cost_price = #{itemCostPrice,jdbcType=BIGINT},
      </if>
      <if test="notaxinclusivecostprice != null" >
        notaxInclusivecostPrice = #{notaxinclusivecostprice,jdbcType=BIGINT},
      </if>
      <if test="itemSizeType != null" >
        item_size_type = #{itemSizeType,jdbcType=VARCHAR},
      </if>
      <if test="stockNum != null" >
        stock_num = #{stockNum,jdbcType=INTEGER},
      </if>
    </set>
    where soi_id = #{soiId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.b2b.common.domain.StandardOrderItem" >
    update standard_orderitem
    set standardorder_id = #{standardorderId,jdbcType=INTEGER},
      item_id = #{itemId,jdbcType=INTEGER},
      item_name = #{itemName,jdbcType=VARCHAR},
      num = #{num,jdbcType=INTEGER},
      fee = #{fee,jdbcType=BIGINT},
      item_price = #{itemPrice,jdbcType=BIGINT},
      item_size = #{itemSize,jdbcType=VARCHAR},
      item_cost_price = #{itemCostPrice,jdbcType=BIGINT},
      notaxInclusivecostPrice = #{notaxinclusivecostprice,jdbcType=BIGINT},
      item_size_type = #{itemSizeType,jdbcType=VARCHAR},
      stock_num = #{stockNum,jdbcType=INTEGER}
    where soi_id = #{soiId,jdbcType=INTEGER}
  </update>
  
  <select id="findOrderItemByOrderNo" resultType="hashmap">
		SELECT
			oi.soi_id,
			oi.standardorder_id ,
			oi.item_id itemId,
			oi.item_name itemName,
			oi.num,
			oi.fee,
			oi.item_size itemSize,
			oi.item_price itemPrice,
			oi.item_cost_price itemCostPrice,
			oi.item_size_type itemSizeType,
			oi.stock_num consumeStockNum,
			i.category_id categoryId,
			i.isDown,
			s.num AS itemStock
		FROM
			standard_orderitem oi
		LEFT JOIN item i ON oi.item_id = i.id
		LEFT JOIN stock s ON oi.item_id = s.item_id and s.state = 1
		WHERE
			oi.standardorder_id = #{soiId}
	</select>
  <select id="selectItemNum" resultMap="BaseResultMap"  >
  select item_name,count(*) num from standard_order `order`
	left outer join standard_orderitem item on item.standardorder_id=`order`.standardorder_id
	where executed_time &gt;=#{startTime} and executed_time &lt;=#{endTime}
	and `order`.snackPackage_type=1 and `order`.`status`=1
	group by item_id
  </select>
  <select id="findByStandOrderId" resultType="StandardOrderItem">
  	SELECT
		stand.soi_id soiId,
	stand.standardorder_id standardorderIdm,
	stand.item_id itemId,
	stand.item_name itemName,
	stand.num num,
	stand.fee fee,
	stand.item_price itemPrice,
	stand.item_size itemSize,
	stand.item_cost_price itemCostPrice,
	stand.item_size_type itemSizeType,
	stand.stock_num stockNum,
	stand.notaxInclusivecostPrice,
  	item.img_path imgPath
	FROM
	standard_orderitem stand
	left outer join item item on item.id=stand.item_id
	WHERE
	stand.standardorder_id = #{snackpackageId}
  </select>
</mapper>