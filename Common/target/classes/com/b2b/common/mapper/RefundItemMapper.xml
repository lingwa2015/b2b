<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.b2b.common.dao.RefundItemMapper" >
  <resultMap id="BaseResultMap" type="com.b2b.common.domain.RefundItem" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="item_id" property="itemId" jdbcType="INTEGER" />
    <result column="num" property="num" jdbcType="INTEGER" />
    <result column="item_name" property="itemName" jdbcType="VARCHAR" />
    <result column="refund_id" property="refundId" jdbcType="INTEGER" />
    <result column="item_price" property="itemPrice" jdbcType="BIGINT" />
    <result column="total_fee" property="totalFee" jdbcType="BIGINT" />
    <result column="item_cost_fee" property="itemCostFee" jdbcType="BIGINT" />
    <result column="cost_fee" property="costFee" jdbcType="BIGINT" />
    <result column="size" property="size" jdbcType="VARCHAR" />
    <result column="size_value" property="sizeValue" jdbcType="VARCHAR" />
    <result column="reason" property="reason" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, item_id, num, item_name, refund_id, item_price, total_fee, item_cost_fee, cost_fee, 
    size, size_value, reason
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.b2b.common.domain.RefundItemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from refund_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from refund_item
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from refund_item
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.b2b.common.domain.RefundItemExample" >
    delete from refund_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.b2b.common.domain.RefundItem" >
    insert into refund_item (id, item_id, num, 
      item_name, refund_id, item_price, 
      total_fee, item_cost_fee, cost_fee, 
      size, size_value, reason
      )
    values (#{id,jdbcType=INTEGER}, #{itemId,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}, 
      #{itemName,jdbcType=VARCHAR}, #{refundId,jdbcType=INTEGER}, #{itemPrice,jdbcType=BIGINT}, 
      #{totalFee,jdbcType=BIGINT}, #{itemCostFee,jdbcType=BIGINT}, #{costFee,jdbcType=BIGINT}, 
      #{size,jdbcType=VARCHAR}, #{sizeValue,jdbcType=VARCHAR}, #{reason,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.b2b.common.domain.RefundItem" >
    insert into refund_item
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="itemId != null" >
        item_id,
      </if>
      <if test="num != null" >
        num,
      </if>
      <if test="itemName != null" >
        item_name,
      </if>
      <if test="refundId != null" >
        refund_id,
      </if>
      <if test="itemPrice != null" >
        item_price,
      </if>
      <if test="totalFee != null" >
        total_fee,
      </if>
      <if test="itemCostFee != null" >
        item_cost_fee,
      </if>
      <if test="costFee != null" >
        cost_fee,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="sizeValue != null" >
        size_value,
      </if>
      <if test="reason != null" >
        reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="itemId != null" >
        #{itemId,jdbcType=INTEGER},
      </if>
      <if test="num != null" >
        #{num,jdbcType=INTEGER},
      </if>
      <if test="itemName != null" >
        #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="refundId != null" >
        #{refundId,jdbcType=INTEGER},
      </if>
      <if test="itemPrice != null" >
        #{itemPrice,jdbcType=BIGINT},
      </if>
      <if test="totalFee != null" >
        #{totalFee,jdbcType=BIGINT},
      </if>
      <if test="itemCostFee != null" >
        #{itemCostFee,jdbcType=BIGINT},
      </if>
      <if test="costFee != null" >
        #{costFee,jdbcType=BIGINT},
      </if>
      <if test="size != null" >
        #{size,jdbcType=VARCHAR},
      </if>
      <if test="sizeValue != null" >
        #{sizeValue,jdbcType=VARCHAR},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.b2b.common.domain.RefundItemExample" resultType="java.lang.Integer" >
    select count(*) from refund_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update refund_item
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.itemId != null" >
        item_id = #{record.itemId,jdbcType=INTEGER},
      </if>
      <if test="record.num != null" >
        num = #{record.num,jdbcType=INTEGER},
      </if>
      <if test="record.itemName != null" >
        item_name = #{record.itemName,jdbcType=VARCHAR},
      </if>
      <if test="record.refundId != null" >
        refund_id = #{record.refundId,jdbcType=INTEGER},
      </if>
      <if test="record.itemPrice != null" >
        item_price = #{record.itemPrice,jdbcType=BIGINT},
      </if>
      <if test="record.totalFee != null" >
        total_fee = #{record.totalFee,jdbcType=BIGINT},
      </if>
      <if test="record.itemCostFee != null" >
        item_cost_fee = #{record.itemCostFee,jdbcType=BIGINT},
      </if>
      <if test="record.costFee != null" >
        cost_fee = #{record.costFee,jdbcType=BIGINT},
      </if>
      <if test="record.size != null" >
        size = #{record.size,jdbcType=VARCHAR},
      </if>
      <if test="record.sizeValue != null" >
        size_value = #{record.sizeValue,jdbcType=VARCHAR},
      </if>
      <if test="record.reason != null" >
        reason = #{record.reason,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update refund_item
    set id = #{record.id,jdbcType=INTEGER},
      item_id = #{record.itemId,jdbcType=INTEGER},
      num = #{record.num,jdbcType=INTEGER},
      item_name = #{record.itemName,jdbcType=VARCHAR},
      refund_id = #{record.refundId,jdbcType=INTEGER},
      item_price = #{record.itemPrice,jdbcType=BIGINT},
      total_fee = #{record.totalFee,jdbcType=BIGINT},
      item_cost_fee = #{record.itemCostFee,jdbcType=BIGINT},
      cost_fee = #{record.costFee,jdbcType=BIGINT},
      size = #{record.size,jdbcType=VARCHAR},
      size_value = #{record.sizeValue,jdbcType=VARCHAR},
      reason = #{record.reason,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.b2b.common.domain.RefundItem" >
    update refund_item
    <set >
      <if test="itemId != null" >
        item_id = #{itemId,jdbcType=INTEGER},
      </if>
      <if test="num != null" >
        num = #{num,jdbcType=INTEGER},
      </if>
      <if test="itemName != null" >
        item_name = #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="refundId != null" >
        refund_id = #{refundId,jdbcType=INTEGER},
      </if>
      <if test="itemPrice != null" >
        item_price = #{itemPrice,jdbcType=BIGINT},
      </if>
      <if test="totalFee != null" >
        total_fee = #{totalFee,jdbcType=BIGINT},
      </if>
      <if test="itemCostFee != null" >
        item_cost_fee = #{itemCostFee,jdbcType=BIGINT},
      </if>
      <if test="costFee != null" >
        cost_fee = #{costFee,jdbcType=BIGINT},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=VARCHAR},
      </if>
      <if test="sizeValue != null" >
        size_value = #{sizeValue,jdbcType=VARCHAR},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.b2b.common.domain.RefundItem" >
    update refund_item
    set item_id = #{itemId,jdbcType=INTEGER},
      num = #{num,jdbcType=INTEGER},
      item_name = #{itemName,jdbcType=VARCHAR},
      refund_id = #{refundId,jdbcType=INTEGER},
      item_price = #{itemPrice,jdbcType=BIGINT},
      total_fee = #{totalFee,jdbcType=BIGINT},
      item_cost_fee = #{itemCostFee,jdbcType=BIGINT},
      cost_fee = #{costFee,jdbcType=BIGINT},
      size = #{size,jdbcType=VARCHAR},
      size_value = #{sizeValue,jdbcType=VARCHAR},
      reason = #{reason,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectStatisticsByDateTime" resultMap="BaseResultMap"
		parameterType="java.util.HashMap">
		select ri.item_id,ri.item_name,SUM(ri.num) as num,SUM(ri.total_fee) as total_fee,IFNULL(SUM(i.cost_price*num),0) as item_price
		from refund_item ri left join item i on ri.item_id = i.id
		where refund_id IN(SELECT id from `refund` where
		<if test="startTime!=null and startTime!='' and endTime!=null and endTime!=''">
		executed_time BETWEEN #{startTime} and #{endTime}
		</if>
		<if test="startTime!=null and startTime!='' and (endTime==null or endTime=='')">
		executed_time &gt; #{startTime}
		</if>

		<if test="(startTime==null or startTime=='') and endTime!=null and endTime!=''">
		executed_time &lt; #{endTime}
		</if>

		<if test="userId!=null and userId!=0">
			and user_id = #{userId}
		</if>

		<if test="status!=null">
			and state = #{status}
		</if>


		)
		<if test="item_name!=null and item_name!=''">
			and ri.item_name = #{item_name}
		</if>

		<if test="item_id!=null and item_id!=''">
			and ri.item_id = #{item_id}
		</if>



		GROUP BY ri.item_id,ri.item_name
	</select>

	<select id="countByStatisticsTotal" parameterType="java.util.HashMap"
		resultMap="BaseResultMap">
		SELECT
		IFNULL(SUM(total_fee),0) as total_fee

		from refund_item  where refund_id IN(SELECT id from `refund` where
		<if test="startTime!=null and startTime!='' and endTime!=null and endTime!=''">
		executed_time BETWEEN #{startTime} and #{endTime}
		</if>
		<if test="startTime!=null and startTime!='' and (endTime==null or endTime=='')">
		executed_time &gt; #{startTime}
		</if>
		<if test="(startTime==null or startTime=='') and endTime!=null and endTime!=''">
		executed_time &lt; #{endTime}
		</if>

		<if test="userId!=null and userId!=0">
			and user_id = #{userId}
		</if>

		<if test="status!=null">
			and state = #{status}
		</if>
		)
	</select>
	<select id="findRefundItemWithPosition" resultMap="BaseResultMap">
		SELECT
			r.*, s.position
		FROM
			refund_item r
		LEFT JOIN stock s ON r.item_id = s.item_id
		WHERE
			r.refund_id = #{id}
			ORDER BY
			s.position;
	</select>
</mapper>